/***************************************************************************
 *   Copyright (C) 2013 by Okkel Klaver   *
 *   info@vanhetland.nl   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#define SEPARATISTA_PROPERTY_GET(type, name, helpstr) \
	[propget, helpstring(helpstr)] \
	HRESULT __stdcall name( \
	[out, retval] type *p##name);

#define SEPARATISTA_PROPERTY_SET(type, name, helpstr) \
	[propput, helpstring(helpstr)] \
	HRESULT __stdcall name( \
	[in] type name);

#define SEPARATISTA_PROPERTY(type, name, helpstr) \
	SEPARATISTA_PROPERTY_GET(type, name, helpstr) \
	SEPARATISTA_PROPERTY_SET(type, name, helpstr)

[
   uuid(6B20C63D-F57B-4755-9D58-11D93D7EC908), 
   helpstring("Separatista 1.0 Type Library."),
   lcid(0),
   version(1)
]

library Separatista
{
	importlib("stdole.tlb");
	importlib("stdole2.tlb");

	/**
		ErrorReport
	*/
	[
		uuid(DD279C98-8CF9-47D4-94BD-D54DDB2E715B),
		helpstring("IErrorReport interface"),
		oleautomation,
		dual,
		odl
	]
	interface IErrorReport : IDispatch
	{
		[propget, helpstring("The number of messages in this report")]
		HRESULT __stdcall Count(
			[out, retval] long *plCount);

		[propget, id(DISPID_VALUE),
			helpstring("Get the message at index")]
		HRESULT __stdcall Item(
			[in] VARIANT vIndex,
			[out, retval] BSTR *pMessage);

		[propget, restricted, id(DISPID_NEWENUM),
			helpstring("Get the enumerator")]
		HRESULT __stdcall _NewEnum(
			[out, retval] IUnknown **ppUnk);
	};
	[
		uuid(89F10D64-9F8A-4B07-B749-266158D4407A),
		helpstring("ErrorReport object")
	]
	coclass ErrorReport
	{
		[default] interface IErrorReport;
		interface IDispatch;
	};

	/**
		IBAN
	*/
	[
		uuid(3CDADD67-109C-49b4-9B1B-5C10B7121EB6),
		helpstring("IIBAN interface"),
		oleautomation,
		dual,
		odl
	]
	interface IIBAN : IDispatch
	{
		[propget, helpstring("IBAN as text")]
		HRESULT __stdcall IBAN(
			[out, retval] BSTR *pIBAN);
	};
	[
		uuid(2BD7342E-B12D-45b0-A5D6-ADF118386112),
		helpstring("IBAN object")
	]
	coclass IBAN
	{
		[default] interface IIBAN;
		interface IDispatch;
	};

	/**
		MT940SRecordset
	*/
	[
		uuid(B61526D3-1B0E-42c0-A276-C0F1DAA94CC8),
		helpstring("IMT940SRecordset interface"),
		oleautomation,
		dual,
		odl
	]
	interface IMT940SRecordset : IDispatch
	{
		[ propget, helpstring("Client Currency") ]
		HRESULT __stdcall CurrencyClient(
			[out, retval] BSTR *pCurrencyClient);

		[ propget, helpstring("Transaction Reference") ]
		HRESULT __stdcall TransactionReference(
			[out, retval] BSTR *pTransactionReference);

		[ propget, helpstring("Serial Number") ]
		HRESULT __stdcall SerialNumber(
			[out, retval] BSTR *pSerialNumber);

		[ propget, helpstring("The Client IBAN") ]
		HRESULT __stdcall IBANClient(
			[out, retval] IIBAN **ppIBANClient);

		[ propget, helpstring("Previous Balance") ]
		HRESULT __stdcall PreviousBalance(
			[out, retval] VARIANT *pPreviousBalance);

		[ propget, helpstring("Previous Balance Date") ]
		HRESULT __stdcall PreviousBalanceDate(
			[out, retval] DATE *pPreviousBalanceDate);

		[ propget, helpstring("Current Balance") ]
		HRESULT __stdcall CurrentBalance(
			[out, retval] VARIANT *pCurrentBalance);

		[ propget, helpstring("Current Balance Date") ]
		HRESULT __stdcall CurrentBalanceDate(
			[out, retval] DATE *pCurrentBalanceDate);

		[ helpstring("Move the internal pointer to the to first record") ]
		HRESULT __stdcall MoveFirst();

		[ helpstring("Move the internal pointer to the next record") ]
		HRESULT __stdcall MoveNext();

		[ propget, helpstring("Check for the End-Of-File bit") ]
		HRESULT __stdcall EOF(
			[out, retval] VARIANT_BOOL *pEOF);

		[ propget, helpstring("Transaction date") ]
		HRESULT __stdcall TransactionDate(
			[out, retval] DATE *pTransactionDate);

		[propget, helpstring("RDC Code")]
		HRESULT __stdcall RDCCode(
			[out, retval] BSTR *pRDCCode);

		[propget, helpstring("Currency")]
		HRESULT __stdcall Currency(
			[out, retval] VARIANT *pCurrency);

		[propget, helpstring("Transaction code")]
		HRESULT __stdcall TransactionCode(
			[out, retval] BSTR *pTransactionCode);

		[propget, helpstring("Transaction Reference")]
		HRESULT __stdcall TransactionRef(
			[out, retval] BSTR *pTransactionReference);

		[propget, helpstring("Foreign IBAN")]
		HRESULT __stdcall ForeignIBAN(
			[out, retval] IIBAN **ppIBAN);

		[propget, id(DISPID_VALUE),
			helpstring("Get the description by key")]
		HRESULT __stdcall Description(
			[in] VARIANT vKey,
			[out, retval] BSTR *pValue);

		[propget, id(DISPID_NEWENUM),
			restricted, helpstring("Get the key enumerator")]
		HRESULT __stdcall _NewEnum(
			[out, retval] IUnknown **ppUnk);
	};
	[
		uuid(343F637E-DA0B-43a4-A802-8F9EF2DCC5DF),
		helpstring("MT940SRecordset object")
	]
	coclass MT940SRecordset 
	{
		[default] interface IMT940SRecordset;
		interface IDispatch;
	};

	/**
		MT940SDocument
	*/
	typedef enum
	{
		OK,
		E_FILE,
		E_FORMAT,
		E_MEMORY
	} MT940SOpenStatus;
	
	[
		uuid(051E4622-F5B0-40c4-81BC-F12EB35F1868),
		helpstring("IMT940SDocument interface"),
		oleautomation,
		dual,
		odl
	]
	interface IMT940SDocument : IDispatch
	{
		[ helpstring("Open a mt940s document") ]
		HRESULT __stdcall Open(
			[in] BSTR Path,
			[out, retval] MT940SOpenStatus* pStatus);

		[ propget, helpstring("The number of MT940SRecordsets in this MT940SDocument" ) ]
		HRESULT __stdcall RecordsetCount(
			[out, retval] long *plCount);

		[ propget, id(DISPID_VALUE),
			helpstring("Get the MT940Recordset at index") ]
		HRESULT __stdcall Item(
			[in] VARIANT vIndex,
			[out, retval] IMT940SRecordset **ppIMT940SRecordset);

		[ propget, restricted, id(DISPID_NEWENUM), 
			helpstring("Get the enumerator") ]
		HRESULT __stdcall _NewEnum(
			[out, retval] IUnknown **ppUnk);


	};

	[
		uuid(6DF05A76-0582-415a-9B96-163F76914250),
		helpstring("MT940SDocument object")
	]
	coclass MT940SDocument 
	{
		[default] interface IMT940SDocument;
		interface IDispatch;
	};

	typedef enum
	{
		DIRECTDEBITDOCUMENT
	} DocumentType;

	/*
	CashAccount
	*/
	[
		uuid(D5E53F81-A97F-4303-9353-1EB1A5BB9EC3),
		helpstring("ICashAccount interface"),
		oleautomation,
		dual,
		odl
	]
	interface ICashAccount : IDispatch
	{
		SEPARATISTA_PROPERTY(BSTR, Identification, "IBAN")
		SEPARATISTA_PROPERTY(BSTR, Type, "")
		SEPARATISTA_PROPERTY(BSTR, Currency, "")
		SEPARATISTA_PROPERTY(BSTR, Name, "")

	}

	[
		uuid(C05C2FD2-6A95-4843-B2C8-31A375DFA282),
		helpstring("CashAccount object")
	]
	coclass CashAccount
	{
		[default] interface ICashAccount;
		interface IDispatch;
	};

	/*
	CodeOrProprietary
	*/
	[
		uuid(8E012AAA-F131-4554-9161-568FF888BD7D),
		helpstring("ICodeOrProprietary interface"),
		oleautomation,
		dual,
		odl
	]
	interface ICodeOrProprietary : IDispatch
	{
		SEPARATISTA_PROPERTY(BSTR, Code, "Parent specific code.")
		SEPARATISTA_PROPERTY(BSTR, Proprietary, "Used when code is not applicable.")
	}

	[
		uuid(AD7CA45E-E648-4A6C-B86F-DEF5CD56A318),
		helpstring("CodeOrProprietary object")
	]
	coclass CodeOrProrietary
	{
		[default] interface ICodeOrProprietary;
		interface IDispatch;
	};

	/*
	PaymentTypeInformation
	*/
	[
		uuid(204ED0EB-F610-44A0-8709-B43212A409E6),
		helpstring("IPaymentTypeInformation interface"),
		oleautomation,
		dual,
		odl
	]
	interface IPaymentTypeInformation : IDispatch
	{
		SEPARATISTA_PROPERTY(BSTR, InstructionPriority, "Message Element that is not part of the addendum for the IG SDD Netherlands but is available for FUTURE use in a SEPA AOS.")
		SEPARATISTA_PROPERTY_GET(ICodeOrProprietary*, ServiceLevel, "Agreement under which or rules under which the transaction should be processed.")
		SEPARATISTA_PROPERTY_GET(ICodeOrProprietary*, LocalInstructment, "User community specific instrument.")
		SEPARATISTA_PROPERTY(BSTR, SequenceType, "Identifies the direct debit sequence, such as first, recurrent, final or one-off.")
		SEPARATISTA_PROPERTY_GET(ICodeOrProprietary*, CategoryPurpose, "Specifies the high level purpose of the instruction based on a set of pre-defined categories.")
	}

	[
		uuid(7AE01D5B-32E2-481E-8A23-06E18F23F556),
		helpstring("PaymentTypeInformation object")
	]
	coclass PaymentTypeInformation
	{
		[default] interface IPaymentTypeInformation;
		interface IDispatch;
	};

	/*
	PartyIdentification
	*/
	[
		uuid(6A5542FA-C264-4AC0-B82B-7B54AB2FB3CF),
		helpstring("IPartyIdentification interface"),
		oleautomation,
		dual,
		odl
	]
	interface IPartyIdentification : IDispatch
	{
		[propget]
		HRESULT __stdcall Name(
			[out, retval] BSTR *pName);
		[propput]
		HRESULT __stdcall Name(
			[in] BSTR Name);
		[propget]
		HRESULT __stdcall PostalAddress(
			[out, retval] BSTR *pPostalAddress);
		[propput]
		HRESULT __stdcall PostalAddress(
			[in] BSTR PostalAddress);
		[propget]
		HRESULT __stdcall Identification(
			[out, retval] BSTR *pIdentification);
		[propput]
		HRESULT __stdcall Identification(
			[in] BSTR Identification);
		[propget]
		HRESULT __stdcall CountryOfResidence(
			[out, retval] BSTR *pCountryOfResidence);
		[propput]
		HRESULT __stdcall CountryOfResidence(
			[in] BSTR CountryOfResidence);
		[propget]
		HRESULT __stdcall ContactDetails(
			[out, retval] BSTR *pContactDetails);
		[propput]
		HRESULT __stdcall ContactDetails(
			[in] BSTR ContactDetails);
	};
	[
		uuid(2E1BDA09-1073-4C08-92E2-1ABD88DBD432),
		helpstring("PartyIdentification object")
	]
	coclass PartyIdentification
	{
		[default] interface IPartyIdentification;
		interface IDispatch;
	};

	/*
	DirectDebitDocument
	*/
	[
		uuid(79F9F451-460D-445C-B176-A0F64C347D1D),
		helpstring("IDirectDebitDocument interface"),
		oleautomation,
		dual,
		odl
	]
	interface IDirectDebitDocument : IDispatch
	{
		SEPARATISTA_PROPERTY(BSTR, MessageIdentification, "Point to point reference, assigned by the instructing party and sent to the next party in the chain, to unambiguously identify the message.")
		SEPARATISTA_PROPERTY(DATE, CreationDateTime, "Date and time at which a (group of) payment instruction(s) was created by the instructing party.")
		SEPARATISTA_PROPERTY(BSTR, Authorisation1, "Message Element that is not part of the addendum for the IG SDD Netherlands but is available for future use in a SEPA AOS.")
		SEPARATISTA_PROPERTY(BSTR, Authorisation2, "Message Element that is not part of the addendum for the IG SDD Netherlands but is available for future use in a SEPA AOS.")
		SEPARATISTA_PROPERTY_GET(VARIANT, NumberOfTransactions, "Number of individual transactions contained in the message.")
		SEPARATISTA_PROPERTY_GET(VARIANT, ControlSum, "Total of all individual amounts included in the message.")
		SEPARATISTA_PROPERTY(BSTR, ForwardingAgent, "Message Element that is not part of the addendum for the IG SDD Netherlands but is available for future use in a SEPA AOS.")
		[propget, helpstring("Party that initiates the payment.")]
		HRESULT __stdcall InitiatingParty(
			[out, retval] IPartyIdentification **ppPartyIdentification);
		[propget, helpstring("Check if the is a current PaymentInformationIdentification")]
		HRESULT __stdcall EOF(
			[out, retval] VARIANT_BOOL *pFEOF);
		[helpstring("Move to the first PaymentInformationIdentification") ]
		HRESULT __stdcall MoveFirst();
		[helpstring("Move to the next PaymentInformationIdentification")]
		HRESULT __stdcall MoveNext();
		[propget, helpstring("Get the number of PaymentInformationIdentification elements")]
		HRESULT __stdcall Count(
			[out, retval] int *pCount);
		SEPARATISTA_PROPERTY(BSTR, PaymentInformationIdentification, "Unique identification, as assigned by a sending party, to unambiguously identify the payment information group within the message.")
		SEPARATISTA_PROPERTY(BSTR, PaymentMethod, "Specifies the means of payment that will be used to move the amount of money.")
		SEPARATISTA_PROPERTY(BSTR, BatchBooking, "Identifies whether a single entry per individual transaction or a batch entry for the sum of the amounts of all transactions within the group of a message is requested.")
		SEPARATISTA_PROPERTY_GET(VARIANT, PaymentInformationNumberOfTransactions, "Number of individual transactions contained in the payment information group.")
		SEPARATISTA_PROPERTY_GET(VARIANT, PaymentInformationControlSum, "Total of all individual amounts included in the group.")

		SEPARATISTA_PROPERTY_GET(IPaymentTypeInformation*, PaymentTypeInformation, "Set of elements used to further specify the type of transaction.")
		SEPARATISTA_PROPERTY(DATE, RequestedCollectionDate, "Date and time at which the creditor requests that the amount of money is to be collected from the debtor.")
		SEPARATISTA_PROPERTY_GET(IPartyIdentification*, Creditor, "Party to which an amount of money is due.")
		SEPARATISTA_PROPERTY_GET(ICashAccount*, CreditorAccount, "Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.")
		SEPARATISTA_PROPERTY(BSTR, CreditorAgentFinancialInstitutionIdentification, "Financial institution servicing an account for the creditor.")
		SEPARATISTA_PROPERTY(BSTR, CreditorAgentBranchIdentification, "Financial institution servicing an account for the creditor.")
		SEPARATISTA_PROPERTY(BSTR, CreditorAgentAccount, Message Element that is not part of the addendum for the IG SDD Netherlands but is available for future use in a SEPA AOS."")
		SEPARATISTA_PROPERTY_GET(IPartyIdentification*, UltimateCreditor, "Ultimate party to which an amount of money is due.")
		SEPARATISTA_PROPERTY(BSTR, ChargeBearer, "Specifies which party/parties will bear the charges associated with the processing of the payment transaction.")
		SEPARATISTA_PROPERTY(BSTR, ChargesAccount, "Message Element that is not part of the addendum for the IG SDD Netherlands but is available for future use in a SEPA AOS.")
		SEPARATISTA_PROPERTY(BSTR, ChargesAccountAgent, "Message Element that is not part of the addendum for the IG SDD Netherlands but is available for future use in a SEPA AOS.")
		SEPARATISTA_PROPERTY_GET(IPartyIdentification*, CreditorSchemeIdentification, "Credit party that signs the mandate.")

};

	[
		uuid(0274813F-6EF4-44DF-8A1C-38262379519F),
		helpstring("DirectDebitDocument object")
	]
	coclass DirectDebitDocument
	{
		[default] interface IDirectDebitDocument;
		interface IDispatch;
	};

	typedef enum
	{
		DOC_OK,
		DOC_E_FILE,
		DOC_E_FORMAT,
		DOC_E_MEMORY
	} DocumentStatus;

	/*
		DocumentReader
	*/
	[
		uuid(6A9512FC-19BF-4F95-83D9-A8A36B1DF018),
		helpstring("IDocumentReader interface"),
		oleautomation,
		dual,
		odl
	]
	interface IDocumentReader : IDispatch
	{
		[helpstring("Read and parse a file returning the status of the operation")]
		HRESULT __stdcall ReadDocument(
			[in] BSTR path,
			[out, retval] DocumentStatus *pStatus);
		[propget, helpstring("The status of a read operation")]
		HRESULT __stdcall Status(
			[out, retval] DocumentStatus *pStatus);
		[propget, helpstring("Error message")]
		HRESULT __stdcall ErrorMessage(
			[out, retval] BSTR *pErrorMessage);
		[propget, helpstring("The path of the parsed file")]
		HRESULT __stdcall Path(
			[out, retval] BSTR *pPath);
		[propget, helpstring("Xml schema validation is/was enabled or disabled")]
		HRESULT __stdcall Validate(
			[out, retval] VARIANT_BOOL *value);
		[propput, helpstring("Enable or disable xml schema validation")]
		HRESULT __stdcall Validate(
			[in] VARIANT_BOOL value);
		[propget, helpstring("Get all xml parsing and/or validation errors")]
		HRESULT __stdcall ErrorReport(
			[out, retval] IErrorReport **ppIErrorReport);
		[propget, helpstring("The type of the document read")]
		HRESULT __stdcall DocumentType(
			[out, retval] DocumentType *pDocumentType);
		[propget, helpstring("In case of a DirectDebitDocument")]
		HRESULT __stdcall DirectDebitDocument(
			[out, retval] IDirectDebitDocument **ppDirectDebitDocument);
	};

	[
		uuid(3FF1D4F5-2C70-4A78-ADCB-88C218E23C91),
		helpstring("DocumentReader object")
	]
	coclass DocumentReader
	{
		[default] interface IDocumentReader;
		interface IDispatch;
	};


}
